!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
CvimServer	cvim_server.py	/^class CvimServer(BaseHTTPRequestHandler):$/;"	c
DMENU	dmenu/dmenu-killall	/^DMENU() { dmenu -p 'Kill'; }$/;"	f
Details	tty/dwm.tmux/README.md	/^## Details$/;"	s
EOF	llc.sh	/^	*) cat << EOF$/;"	h
EOF	lmc	/^	*) cat << EOF$/;"	h
HELP	pkgsearch	/^  LESS=-FEXR less <<HELP$/;"	h
Ifinstalled	compiler	/^Ifinstalled(){$/;"	f
Install	i3-wm-scripts/README.md	/^### Install$/;"	S
Notification_menu	dmenu/dmenu_kdeconnect.sh	/^Notification_menu () {$/;"	f
PORT	cvim_server.py	/^PORT = 8001$/;"	v
SendKeys	dmenu/dmenu_kdeconnect.sh	/^SendKeys(){$/;"	f
Setup	tty/dwm.tmux/README.md	/^## Setup$/;"	s
Usage	tty/dwm.tmux/README.md	/^## Usage$/;"	s
VIM_COMMAND	cvim_server.py	/^VIM_COMMAND = 'st -e vim'$/;"	v
_die	dmenu/dmenu-killall	/^_die() {$/;"	f
_get_process_names	dmenu/dmenu-killall	/^_get_process_names() {$/;"	f
_notify	dmenu/dmenu-killall	/^_notify() {$/;"	f
_usage	dmenu/dmenu-killall	/^_usage() {$/;"	f
arch	pkgsearch	/^arch() {$/;"	f
archwiki	dmenu/cabl	/^archwiki() { "$BROWSER" "https:\/\/wiki.archlinux.org\/index.php?search=$*" ;}$/;"	f
askrecording	dmenu/dmenurecord	/^askrecording() { \\$/;"	f
asktoend	dmenu/dmenurecord	/^asktoend() { \\$/;"	f
asktype	dmenu/dmenumount	/^asktype() { \\$/;"	f
asktype	dmenu/dmenuumount	/^asktype() { \\$/;"	f
audioalsa	dmenu/dmenurecord	/^audioalsa() { \\$/;"	f
audiopulse	dmenu/dmenurecord	/^audiopulse() { \\$/;"	f
bm_tree_walk	importer.py	/^        def bm_tree_walk(bm, template):$/;"	f	function:import_chrome	file:
browser_default_input_format	importer.py	/^browser_default_input_format = {$/;"	v
checkbluetooth	autostart.sh	/^checkbluetooth(){ \\$/;"	f
chex	tpb.sh	/^chex() {$/;"	f
clone	dmenu/cabl	/^echo "$prim" | grep "^.*git*" >\/dev\/null && clone() { notify-send "cloning started"; git -C "$/;"	f
compilec	compiler	/^compilec(){$/;"	f
createtodo	dmenu/dmenu_googletasks.sh	/^createtodo(){$/;"	f
createtodo	dmenu/dmenu_todo.sh	/^createtodo(){$/;"	f
cycle_selected	i3-wm-scripts/common.py	/^def cycle_selected(current, selected):$/;"	f
debian	pkgsearch	/^debian() {$/;"	f
decrypt	pwd.sh	/^decrypt () {$/;"	f
die	fzf/fv	/^die() {$/;"	f
die	pkgrm	/^die() {$/;"	f
die	pkgsearch	/^die() {$/;"	f
do_POST	cvim_server.py	/^    def do_POST(self):$/;"	m	class:CvimServer
dwm.tmux	tty/dwm.tmux/README.md	/^dwm.tmux$/;"	c
ebay	dmenu/cabl	/^ebay() { "$BROWSER" "https:\/\/www.ebay.com\/sch\/$*" ;}$/;"	f
edit_file	cvim_server.py	/^def edit_file(content):$/;"	f
email	dmenu/cabl	/^echo "$prim" | grep "^.*@.*\\.[A-Za-z]\\+$" >\/dev\/null && email() { xdg-email "$@" ;}$/;"	f
encrypt	pwd.sh	/^encrypt () {$/;"	f
eof	unix	/^cat << 'eof'$/;"	h
err	fzf/fv	/^err() {$/;"	f
err	pkgrm	/^err() {$/;"	f
err	pkgsearch	/^err() {$/;"	f
error	updatedotfiles.sh	/^error() { clear; printf "ERROR:\\\\n%s\\\\n" "$1"; exit;}$/;"	f
fail	pwd.sh	/^fail () {$/;"	f
fatal	i3-wm-scripts/i3-exec	/^fatal() {$/;"	f
fedora	pkgsearch	/^fedora() {$/;"	f
filter	i3-wm-scripts/i3mpd	/^filter() {$/;"	f
focus_window	i3-wm-scripts/common.py	/^def focus_window(id):$/;"	f
fzf	fzf/fv	/^fzf() {$/;"	f
fzf	pkgrm	/^fzf() {$/;"	f
fzf	pkgsearch	/^fzf() {$/;"	f
gen_pass	pwd.sh	/^gen_pass () {$/;"	f
get_args	importer.py	/^def get_args():$/;"	f
get_bookmark_lines	i3-wm-scripts/vimb-bookmark	/^def get_bookmark_lines(filename):$/;"	f
get_icon	dmenu/dmenu_kdeconnect.sh	/^get_icon () {$/;"	f
get_named_windows	i3-wm-scripts/common.py	/^def get_named_windows():$/;"	f
get_pass	pwd.sh	/^get_pass () {$/;"	f
get_tree	i3-wm-scripts/common.py	/^def get_tree():$/;"	f
getmount	dmenu/dmenumount	/^getmount() { \\$/;"	f
getsink	volumechecker.sh	/^getsink() {$/;"	f
getvolume	volumechecker.sh	/^getvolume() {$/;"	f
handle_option	i3-wm-scripts/i3-exec	/^handle_option() {$/;"	f
has	fzf/fv	/^has() {$/;"	f
has	pkgrm	/^has() {$/;"	f
has	pkgsearch	/^has() {$/;"	f
i3-wm-scripts	i3-wm-scripts/README.md	/^i3-wm-scripts$/;"	c
i3_exec_quote	i3-wm-scripts/i3-exec	/^i3_exec_quote() {$/;"	f
import_chrome	importer.py	/^def import_chrome(profile, bookmark_types, output_format):$/;"	f
import_moz_places	importer.py	/^def import_moz_places(profile, bookmark_types, output_format):$/;"	f
import_netscape_bookmarks	importer.py	/^def import_netscape_bookmarks(bookmarks_file, bookmark_types, output_format):$/;"	f
init_server	cvim_server.py	/^def init_server(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):$/;"	f
install	pkgsearch	/^install() {$/;"	f
iter_plus	i3-wm-scripts/nextfind	/^def iter_plus(it, extra):$/;"	f
iter_plus	i3-wm-scripts/nextfind_	/^def iter_plus(it, extra):$/;"	f
iter_plus	i3-wm-scripts/nextfind_0	/^def iter_plus(it, extra):$/;"	f
joinlines	i3-wm-scripts/nextfind	/^def joinlines(L):$/;"	f
joinlines	i3-wm-scripts/nextfind_	/^def joinlines(L):$/;"	f
joinlines	i3-wm-scripts/nextfind_0	/^def joinlines(L):$/;"	f
kdeconnect	dmenu/cabl	/^echo "$prim" | grep "^.*\\.[A-Za-z]\\+.*" >\/dev\/null && url() { "$TRUEBROWSER" "$@" ;} && kdec/;"	f
killrecording	dmenu/dmenurecord	/^killrecording() {$/;"	f
main	i3-wm-scripts/nextfind	/^def main(args):$/;"	f
main	i3-wm-scripts/nextfind_	/^def main(args):$/;"	f
main	i3-wm-scripts/nextfind_0	/^def main(args):$/;"	f
main	i3-wm-scripts/nextmatch	/^def main(args):$/;"	f
main	i3-wm-scripts/vimb-bookmark	/^def main(args):$/;"	f
main	importer.py	/^def main():$/;"	f
manual	dmenu/cabl	/^man -k "^$prim$" >\/dev\/null && manual() { man -Tpdf "$prim" | $READER - ;}$/;"	f
maps	dmenu/cabl	/^maps() { "$BROWSER" "https:\/\/maps.google.com\/?q=$*" ;}$/;"	f
mark/goto/unmark	i3-wm-scripts/README.md	/^### mark\/goto\/unmark$/;"	S
morescreen	dmenu/displayselect	/^morescreen() { # If multi-monitor is selected and there are more than two screens.$/;"	f
mountandroid	dmenu/dmenumount	/^mountandroid() { \\$/;"	f
mountusb	dmenu/dmenumount	/^mountusb() { \\$/;"	f
moveChoice	i3-wm-scripts/i3resize	/^moveChoice() {$/;"	f
multimon	dmenu/displayselect	/^multimon() { # Multi-monitor handler.$/;"	f
new_entry	pwd.sh	/^new_entry () {$/;"	f
nextfind	i3-wm-scripts/README.md	/^### nextfind$/;"	S
nextmatch	i3-wm-scripts/README.md	/^### nextmatch$/;"	S
opensearch_convert	importer.py	/^def opensearch_convert(url):$/;"	f
pick_destination	fzf/fv	/^pick_destination() {$/;"	f
pick_files	fzf/fv	/^pick_files() {$/;"	f
popen	i3-wm-scripts/vimb-bookmark	/^def popen(*args, **kwds):$/;"	f
print_date	windowshot.sh	/^print_date(){$/;"	f
print_help	pwd.sh	/^print_help () {$/;"	f
printhelp	tpb.sh	/^printhelp() {$/;"	f
putgitrepo	updatedotfiles.sh	/^putgitrepo() { # Downlods a gitrepo $1 and places the files in $2 only overwriting conflicts$/;"	f
qrcode	dmenu/cabl	/^command -v qrencode >\/dev\/null && qrcode() { qrencode "$@" -s 10 -o \/tmp\/qr.png && xdg-open /;"	f
read	dmenu/cabl	/^read() { pico2wave -w=\/tmp\/test.wav "$*"; aplay \/tmp\/test.wav -D 'pulse'; rm \/tmp\/test.wav/;"	f
read_pass	pwd.sh	/^read_pass () {$/;"	f
screencastalsa	dmenu/dmenurecord	/^screencastalsa() { \\$/;"	f
screencastpulse	dmenu/dmenurecord	/^screencastpulse() { \\$/;"	f
scripts	README.md	/^# scripts$/;"	c
search_conv	importer.py	/^    def search_conv(url):$/;"	f	function:import_moz_places	file:
search_escape	importer.py	/^def search_escape(url):$/;"	f
search_window	i3-wm-scripts/nextmatch	/^def search_window(windows, expr):$/;"	f
select_from	pkgrm	/^select_from() {$/;"	f
select_from	pkgsearch	/^select_from() {$/;"	f
select_window	i3-wm-scripts/nextfind	/^def select_window(windows, dmenu_args):$/;"	f
select_window	i3-wm-scripts/nextfind_	/^def select_window(windows, dmenu_args):$/;"	f
select_window	i3-wm-scripts/nextfind_0	/^def select_window(windows, dmenu_args):$/;"	f
shebangtest	compiler	/^shebangtest() {$/;"	f
show_devices	dmenu/dmenu_kdeconnect.sh	/^show_devices (){$/;"	f
show_menu	dmenu/dmenu_kdeconnect.sh	/^show_menu () {$/;"	f
show_pmenu	dmenu/dmenu_kdeconnect.sh	/^show_pmenu () {$/;"	f
split_checker	i3-wm-scripts/checksplit.sh	/^split_checker()$/;"	f
textype	compiler	/^textype() { \\$/;"	f
toggle	dmenu/dmenu_googletasks.sh	/^toggle(){$/;"	f
twoscreen	dmenu/displayselect	/^twoscreen() { # If multi-monitor is selected and there are two screens.$/;"	f
unmountandroid	dmenu/dmenuumount	/^unmountandroid() { \\$/;"	f
unmountusb	dmenu/dmenuumount	/^unmountusb() {$/;"	f
updateicon	dmenu/dmenurecord	/^updateicon() { \\$/;"	f
url	dmenu/cabl	/^echo "$prim" | grep "^.*\\.[A-Za-z]\\+.*" >\/dev\/null && url() { "$TRUEBROWSER" "$@" ;} && kdec/;"	f
usage	dmenu/calc.sh	/^usage() {$/;"	f
usage	pkgsearch	/^usage() {$/;"	f
video	dmenu/dmenurecord	/^video() { ffmpeg \\$/;"	f
void	pkgsearch	/^void() {$/;"	f
websearch	dmenu/cabl	/^websearch() { "$BROWSER" "https:\/\/duckduckgo.com\/?q=$*" ;}$/;"	f
write_pass	pwd.sh	/^write_pass () {$/;"	f
youtube	dmenu/cabl	/^youtube() { "$BROWSER" "https:\/\/www.youtube.com\/results?search_query=$*" ;}$/;"	f
