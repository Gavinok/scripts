k() {
  if [ $TMUX ]; then
    clear
    tmux clear-history
  elif [ $ITERM_SESSION_ID ]; then
    printf '\e]50;ClearScrollback\a'
  else
    tput reset
  fi
}

work() {
  if [ $1 ] || [ $ACTIVE_PROJ ]; then
    local proj_dir=$HOME/projects
    if [ $1 ]; then
      local targ=$1
    else
      local targ=$ACTIVE_PROJ
    fi
    if [ -d $proj_dir/$targ ]; then
      cd $proj_dir/$targ
      k
      if git rev-parse --is-inside-work-tree &> /dev/null; then
        git status
      fi
    else
      echo "could not find project $targ in $proj_dir"
      return 2
    fi
  else
    echo "ACTIVE_PROJ not defined"
    return 1
  fi
}

fd(){
    file=$(du -a ~/.scripts/* ~/.config/* | awk '{print $2}' | fzf)
    dir=${file%/*}
    cd $dir
    $EDITOR $file
}

# Fuzzy search shell command history
fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# Fuzzy open files
#   - CTRL-O to open with `xdg-open` command,
#   - CTRL-E or Enter to open with the $EDITOR
fo() {
  local out candidates files key prog
  prog="${EDITOR:-vim}"
  candidates="$(ls -a | fzf)"
  out=($(fzf --query="$1" --multi --exit-0 --expect=ctrl-o,ctrl-e <<< ${candidates}))
  key=$(head -1 <<< "$out")
  if [ "$key" = ctrl-o ] || [ "$key" = ctrl-e ]; then
    files="$(tail +2 <<< "$out")"
    case "$key" in
    ctrl-o)
	prog=ranger
	# xdg-open can only open one file at a time
	files="$(head -1 <<< "$files")";;
    ctrl-e)
	files="$out"
	key="";;
    esac
  fi
  [ -n "$files" ] && echo "$files" | xargs -d '\n' "$prog"
}

# Fuzzy cd
fc() {
    local dir
    dir=$(ls -a | fzf +m)
    cd "$dir"
}

# Fuzzy SSH
fssh() {
  local user_prefix
  if [ -n "$1" ]; then
    user_prefix="${1}@"
  fi
  ssh "$user_prefix$(grep '^host\b' $HOME/.ssh/config | awk '{print $2}' | fzf)"
}

# Fuzzy Tmux attach
ft() {
  session="$(tmux ls -F '#{session_name}' | fzf)"
  if [[ -n "$session" ]]; then
    tmux a -t "$session"
  else
    return 1
  fi
}

# Edit common config files
vc() {
  if [ -z $CONFIG_BOOKMARKS ]; then
    echo '$CONFIG_BOOKMARKS not defined'
    return 2
  fi
  echo $CONFIG_BOOKMARKS | fzf --query="$1" | sed "s|~|$HOME|" | xargs -r $EDITOR
}

# Edit common scripts
vs() {
  if [ -z $BIN_BOOKMARKS ]; then
    echo '$BIN_BOOKMARKS not defined'
    return 2
  fi
  find -H $BIN_BOOKMARKS -type f -not -path '*/.git/*' | fzf --query="$1" | sed "s|~|$HOME|" | xargs -r $EDITOR
}
ranger() {
    if [ -z "$RANGER_LEVEL" ]; then
        /usr/bin/ranger "$@"
    else
        exit
    fi
}

# export NNN_TMPFILE="/tmp/nnn"
# r()
# {
#         nnn "$@" -l
#
#         if [ -f $NNN_TMPFILE ]; then
#                 . $NNN_TMPFILE
#                 rm $NNN_TMPFILE
#         fi
# }
# vim:ft=sh
