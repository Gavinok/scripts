k() {
    if [ $TMUX ]; then
	clear
	tmux clear-history
    elif [ $ITERM_SESSION_ID ]; then
	printf '\e]50;ClearScrollback\a'
    else
	tput reset
    fi
}

work() {
    if [ $1 ] || [ $ACTIVE_PROJ ]; then
	local proj_dir=$HOME/projects
	if [ $1 ]; then
	    local targ=$1
	else
	    local targ=$ACTIVE_PROJ
	fi
	if [ -d $proj_dir/$targ ]; then
	    cd $proj_dir/$targ
	    k
	    if git rev-parse --is-inside-work-tree &> /dev/null; then
		git status
	    fi
	else
	    echo "could not find project $targ in $proj_dir"
	    return 2
	fi
    else
	echo "ACTIVE_PROJ not defined"
	return 1
    fi
}

fd(){
    file=$(du -a ~/.scripts/* ~/.config/* | awk '{print $2}' | fzf)
    dir=${file%/*}
    cd $dir
    $EDITOR $file
}

# Fuzzy SSH
fssh() {
    local user_prefix
    if [ -n "$1" ]; then
	user_prefix="${1}@"
    fi
    ssh "$user_prefix$(grep '^host\b' $HOME/.ssh/config | awk '{print $2}' | fzf)"
}

# Fuzzy Tmux attach
ft() {
    session="$(tmux ls -F '#{session_name}' | fzf)"
    if [[ -n "$session" ]]; then
	tmux a -t "$session"
    else
	return 1
    fi
}

ranger() {
    if [ -z "$RANGER_LEVEL" ]; then
	/usr/bin/ranger "$@"
    else
	exit
    fi
}

# export NNN_TMPFILE="/tmp/nnn"
# r()
# {
#         nnn "$@" -l
#
#         if [ -f $NNN_TMPFILE ]; then
#                 . $NNN_TMPFILE
#                 rm $NNN_TMPFILE
#         fi
# }

# ------------FZF Keybindings
if [[ $- == *i* ]]; then

# CTRL-T - Paste the selected file path(s) into the command line
    __fsel() {
	local cmd="${FZF_CTRL_T_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type f -print \
    -o -type d -print \
    -o -type l -print 2> /dev/null | cut -b3-"}"
	setopt localoptions pipefail 2> /dev/null
	eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" $(__fzfcmd) -m "$@" | while read item; do
	    echo -n "${(q)item} "
	done
	local ret=$?
	echo
	return $ret
    }

    __fzf_use_tmux__() {
	[ -n "$TMUX_PANE" ] && [ "${FZF_TMUX:-0}" != 0 ] && [ ${LINES:-40} -gt 15 ]
    }

    __fzfcmd() {
	__fzf_use_tmux__ &&
	echo "fzf-tmux -d${FZF_TMUX_HEIGHT:-40%}" || echo "fzf"
    }

    fzf-file-widget() {
	LBUFFER="${LBUFFER}$(__fsel)"
	local ret=$?
	zle reset-prompt
	return $ret
    }
    zle     -N   fzf-file-widget
    bindkey '^T' fzf-file-widget

# Ensure precmds are run after cd
    fzf-redraw-prompt() {
	local precmd
	for precmd in $precmd_functions; do
	    $precmd
	done
	zle reset-prompt
    }
    zle -N fzf-redraw-prompt

# CTRL-O - cd into the selected directory
    fzf-cd-widget() {
	local cmd="${FZF_ALT_C_COMMAND:-"command find -L . -mindepth 1 -maxdepth 2 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type d -print 2> /dev/null | cut -b3-"}"
	setopt localoptions pipefail 2> /dev/null
	local dir="$(eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS" $(__fzfcmd) +m)"
	if [[ -z "$dir" ]]; then
	    zle redisplay
	    return 0
	fi
	cd "$dir"
	local ret=$?
	zle fzf-redraw-prompt
	return $ret
    }
    zle     -N    fzf-cd-widget
    bindkey '^O' fzf-cd-widget

# CTRL-R - Paste the selected command from history into the command line
    fzf-history-widget() {
	local selected num
	setopt localoptions noglobsubst noposixbuiltins pipefail 2> /dev/null
	selected=( $(fc -rl 1 |
		FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort $FZF_CTRL_R_OPTS --query=${(qqq)LBUFFER} +m" $(__fzfcmd)) )
	local ret=$?
	if [ -n "$selected" ]; then
	    num=$selected[1]
	    if [ -n "$num" ]; then
		zle vi-fetch-history -n $num
	    fi
	fi
	zle reset-prompt
	return $ret
    }
    zle     -N   fzf-history-widget
# bindkey '^i' fzf-history-widget

fi
# vim:ft=sh
