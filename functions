# make plan9 walk available on all systems
walk() {
	if command -v walk >/dev/null 2>&1; then
		/usr/local/bin/walk $@
	elif command -v fd >/dev/null 2>&1; then
		fd -c never .
	else
		find .
	fi
}

# Calculator
calc() { echo "scale=5;$*" | bc -l; }

r() {
	# Block nesting of nnn in subshells
	if [ -n "${NNNLVL}" ] && [ "${NNNLVL:-0}" -ge 1 ]; then
		echo "nnn is already running"
		return
	fi

# The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
# To cd on quit only on ^G, remove the "export" as in:
#     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
# NOTE: NNN_TMPFILE is fixed, should not be modified
export NNN_TMPFILE="${XDG_CONFIG_HOME:-${HOME}/.config}/nnn/.lastd"

nnn -c "$@"

if [ -f "${NNN_TMPFILE}" ]; then
	. "${NNN_TMPFILE}"
	rm -f "${NNN_TMPFILE}" >/dev/null
fi
}

# f() {
#     fff "$@"
#     cd "$(cat "${XDG_CACHE_HOME:=${HOME}/.cache}/fff/.fff_d")"
# }

#dirsize - finds directory sizes and lists them for the current directory
dirsize() {
	du -shx -- * .[a-zA-Z0-9_]* 2>/dev/null | grep -E '^ *[0-9.]*[MG]' | sort -n >/tmp/list
	grep -E '^ *[0-9.]*M' /tmp/list
	grep -E '^ *[0-9.]*G' /tmp/list
	rm /tmp/list
}

#myip - finds your current IP if your connected to the internet
myip() {
	lynx -dump -hiddenlinks=ignore -nolist http://checkip.dyndns.org:8245/ | awk '{ print $4 }' | sed '/^$/d; s/^[ ]*//g; s/[ ]*$//g'
}

# mkdir and cd in one command
mcd() {
	mkdir -p -- "$1" &&
		cd -P -- "$1" || return
	}

# define a word
define() { curl -s "dict://dict.org/d:$1" | grep -v '^[0-9]'; }

man() { /bin/man $@ || awman "$@"; }

# Create a shell function as a wrapper
viminfo() { ${EDITOR:-vi} -R -M -c "Info $1 $2" +only; }
# Alias info to our new function
# alias info=viminfo

notegrep() { ${EDITOR:-vi} -c "NGrep $*"; }

fn() { ${EDITOR:-vim} $(rg -n '.*' "$HOME/Documents/org/" | fzf --layout=reverse --height 50% --ansi | sed -E 's/(.*):([0-9]+):.*/\1 +\2/g'); }

fr() { ${EDITOR:-vim} $(rg -n '.*' "$HOME/.config/remind/" | fzf --layout=reverse --height 50% --ansi | sed -E 's/(.*):([0-9]+):.*/\1 +\2/g'); }

cpuspeed() { cpupower frequency-info -fm | grep -oP '(?<=frequency: )([^ ]+ [^ ]+)'; }

powernow() { echo "scale=5;$(cat /sys/class/power_supply/BAT0/power_now)/1000000" | bc -l; }

onecpu() { echo 0 | sudo tee /sys/devices/system/cpu/cpu*/online; }

allcpu() { echo 1 | sudo tee /sys/devices/system/cpu/cpu*/online; }

# may remove if I never end up using it
sxiv() { sw sxiv "$*" ; }
xournalpp() { sw xournalpp "$*" ; }
#vim:ft=sh

fzjq() {
	echo '' | fzf --print-query --preview "jq {q} \"$*\""
}

fzrec() {
	echo '' | fzf --print-query --preview "recsel {q} $*"
}

fzndb() {
	echo '' | fzf --print-query --preview "ndbquery -f $* atomicnumber {q}"
}


fzawk() {
	echo '' | fzf --layout=reverse --height 50% --print-query --preview 'echo "a\nb\nc\nd" | awk {q}'
}

fzR() {
	echo '' | fzf --layout=reverse --height 50% --print-query --preview 'R -s -e {q}'

}
