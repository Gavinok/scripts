#!/bin/sh

# TODO:  add support for disableing dunst using
# notify-send "DUNST_COMMAND_PAUSE"
# and
# notify-send "DUNST_COMMAND_RESUME"

# Usage:
# `record`: Ask for recording type via dmenu
# `record screencast`: Record both audio and screen
# `record video`: Record only screen
# `record audio`: Record only audio
# `record kill`: Kill existing recording
#
# If there is already a running instance, user will be prompted to end it.

[ -z "$VIDEODIR" ] && VIDEODIR="${HOME}/Videos/clips"
[ -z "$LAUNCHER" ] && LAUNCHER="dmenu -l 5 -i -p "

mkdir -p "${VIDEODIR}"
RECORDINGFILE=""

updateicon() { \
	echo "$1" > ~/.recordingicon
	pkill -RTMIN+9 i3blocks
}

killrecording() {
	recpid="$(cat ~/.recordingpid)"
	# kill with SIGTERM, allowing finishing touches.
	kill -15 "$recpid"
	rm -f ~/.recordingpid
	updateicon ""
	pkill -RTMIN+9 i3blocks
	# even after SIGTERM, ffmpeg may still run, so SIGKILL it.
	sleep 3
	kill -9 "$recpid"
	[ -f ~/.recordingfile ] && playrecording
	exit
}

stream() { \
	twitchkey=$(pass twitchkey)
	if [ "$twitchkey" = "" ]; then
		notify-send "ERROR: no twitch key found"
		exit 1
	fi
	ffmpeg \
	-y -loglevel warning \
	-f x11grab \
	-framerate 30 \
	-s 1280x800 \
	-i :0.0 \
	-f alsa -i default \
	-r 15 \
	-c:v libx264 -b:v 2M -maxrate 2M -bufsize 500K \
	-preset ultrafast -tune zerolatency \
	-c:a aac -pix_fmt yuv420p -f flv\
	rtmp://live-sea.twitch.tv/app/"$twitchkey"  &
	echo $! > ~/.recordingpid
	updateicon "‚è∫Ô∏èüéôÔ∏è"
	notify-send "Dont forget to enlarge terminal text"
}

screencastpulse() { \
	RECORDINGFILE="$VIDEODIR/screencast-$(date '+%y%m%d-%H%M-%S').webm"
	ffmpeg -y \
	-f x11grab \
	-framerate 30 \
	-s 1280x800 \
	-i :0.0 \
        -f pulse -i default \
	-r 30 \
	-c:v libvpx -crf 0 -preset ultrafast -c:a flac \
	 "$RECORDINGFILE" &
	echo $! > ~/.recordingpid
	echo "$RECORDINGFILE" > ~/.recordingfile
	updateicon "‚è∫Ô∏èüéôÔ∏è"
	notify-send "Dont forget to enlarge terminal text"
}

screencastpulseMKV() { \
	RECORDINGFILE="$VIDEODIR/screencast-$(date '+%y%m%d-%H%M-%S').mkv"
	ffmpeg -y \
	-f x11grab \
	-framerate 30 \
	-s 1280x800 \
	-i :0.0 \
	# -f fbdev -i /dev/fb0 \
	-f pulse -i default \
	-r 30 \
	-c:v libx264rgb -crf 0 -preset ultrafast -c:a flac \
	 "$RECORDINGFILE" &
	echo $! > ~/.recordingpid
	echo "$RECORDINGFILE" > ~/.recordingfile
	updateicon "‚è∫Ô∏èüéôÔ∏è"
	notify-send "Dont forget to enlarge terminal text"
}

webcampulse() { \
	RECORDINGFILE="$VIDEODIR/webcam-$(date '+%y%m%d-%H%M-%S').mkv"
	WEBCAM=/dev/video0
	ffmpeg -y \
	-f v4l2 \
	-framerate 30 \
	-video_size 1920x1080 \
	-input_format mjpeg \
	-i $WEBCAM \
	-f alsa -i default \
	-r 30 \
	-c:a flac \
	-c copy \
	"$RECORDINGFILE" &
	v4l2-ctl -d $WEBCAM -c focus_auto=0
	echo $! > ~/.recordingpid
	echo "$RECORDINGFILE" > ~/.recordingfile
	updateicon "‚è∫Ô∏èüéôÔ∏è"
	notify-send "Dont forget to enlarge terminal text"
}

screencastalsa() { \
	ffmpeg -y \
	-f x11grab \
	-s $(xdpyinfo | grep dimensions | awk '{print $2;}') \
	-i :0.0 \
	-thread_queue_size 1024 \
	-f alsa -ar 44100 -i hw:1 \
	-c:v libx264 -r 30 -c:a flac \
	"$VIDEODIR/screencast-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > ~/.recordingpid
	updateicon "‚è∫Ô∏è"
}



video() { \
	  RECORDINGFILE="$VIDEODIR/video-$(date '+%y%m%d-%H%M-%S').webm"
	  ffmpeg \
	      -f x11grab \
	      -framerate 30 \
	      -s $(xdpyinfo | grep dimensions | awk '{print $2;}') \
	      -i :0.0 \
	      -deadline realtime \
	      -b 50000000 \
	      -minrate 20000000 \
	      -maxrate 400000000 \
	      -c:v vp8 \
	      "$RECORDINGFILE" &
	  echo $! > ~/.recordingpid
	  echo "$RECORDINGFILE" > ~/.recordingfile
	  updateicon "‚è∫Ô∏è"
}

videomkv() { \
	ffmpeg \
	-f x11grab \
	-s $(xdpyinfo | grep dimensions | awk '{print $2;}') \
	-i :0.0 \
	-c:v libx264 -qp 0 -r 30 \
	"$VIDEODIR/video-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > ~/.recordingpid
	updateicon "‚è∫Ô∏è"
}

audiopulse() { \
	RECORDINGFILE="$VIDEODIR/audio-$(date '+%y%m%d-%H%M-%S').flac"
	ffmpeg \
	-f alsa -i default \
	-c:a flac \
	"$RECORDINGFILE" &
	echo $! > ~/.recordingpid
	echo "$RECORDINGFILE" > ~/.recordingfile
	updateicon "üéôÔ∏è"
}

audioalsa() { \
	ffmpeg -y \
	-f alsa -ar 44100 -i hw:1 \
	"$VIDEODIR/audio-$(date '+%y%m%d-%H%M-%S').flac" &
	echo $! > ~/.recordingpid
	updateicon "üéôÔ∏è"
}

askrecording() { \
	choice=$(printf "screencast\\nstream\\nwebcam\\nvideo\\naudio" | $LAUNCHER "Select recording style:")
	case "$choice" in
		screencast) screencastpulse;;
		webcam) webcampulse;;
		stream) stream;;
		audio) audiopulse;;
		video) video;;
	esac
}

playrecording() { \
	RECORDINGFILE="$(cat ~/.recordingfile)"
	rm -f ~/.recordingpid
	xdg-open "$RECORDINGFILE"
	asktodelete
}

asktodelete() { \
	response=$(printf "No\\nYes" | $LAUNCHER "Would you like to delete this recording? ") &&
	[ "$response" = "Yes" ] && rm -f "$RECORDINGFILE" && notify-send "Deleted $RECORDINGFILE"
}

asktoend() { \
	response=$(printf "No\\nYes" | $LAUNCHER "Recording still active. End recording?") &&
	[ "$response" = "Yes" ] && killrecording
}


case "$1" in
	screencast) screencastpulse;;
	webcam) webcampulse;;
	stream) stream;;
	audio) audiopulse;;
	video) video;;
	kill) killrecording;;
	*) ([ -f ~/.recordingpid ] && asktoend && exit) || askrecording;;
esac
#vim:ft=sh
